from core.handlers.base_handler import BaseHandler
from core.skills.multi_step_task import MultiStepTaskSkill
from core.router.llm_router import resolve_task

class ManagerHandler(BaseHandler):
    def __init__(self):
        self.pending_tasks = {}

    async def handle(self, user_id: str, message: str) -> str:
        # –û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        if user_id in self.pending_tasks:
            task = self.pending_tasks.pop(user_id)
            full_message = f"{task['original_task']}. –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {message}"
            mode, handler = await resolve_task(user_id, full_message)

            if mode == "complex":
                return await MultiStepTaskSkill().execute(user_id, full_message)
            elif mode == "clarify":
                return "üîÑ –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–Ω–µ–µ."
            elif handler:
                return await handler.handle(user_id, full_message)
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è."

        # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ ‚Äî –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        mode, handler = await resolve_task(user_id, message)

        if mode == "complex":
            return await MultiStepTaskSkill().execute(user_id, message)

        if mode == "clarify":
            self.pending_tasks[user_id] = {
                "original_task": message,
                "clarification": "‚ùì –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É."
            }
            return "‚ùì –£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É."

        if handler:
            return await handler.handle(user_id, message)

        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏."
