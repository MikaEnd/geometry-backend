from core.interfaces import Skill
from core.services.llm import ask_llm

class WriteFileSkill(Skill):
    def can_handle(self, message: str) -> bool:
        return "—Å–æ—Ö—Ä–∞–Ω–∏" in message or "—Ñ–∞–π–ª" in message

    async def execute(self, user_id: str, message: str) -> str:
        system_prompt = (
            "–¢—ã —Ñ–∞–π–ª–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—É—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. "
            "–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <filename>\n<content>. –ë–µ–∑ markdown, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        )
        response = ask_llm(system_prompt=system_prompt, user_message=message)
        raw = response.get("text", "").strip()

        if "\n" not in raw:
            return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {raw}"

        filename, content = raw.split("\n", 1)
        try:
            with open(filename.strip(), "w", encoding="utf-8") as f:
                f.write(content.strip())
            return f"üìÑ –§–∞–π–ª {filename.strip()} —Å–æ–∑–¥–∞–Ω."
        except Exception as e:
            return f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}"
