import os
import requests
import time
import sys
import tty
import termios
import fcntl
from core.skills.base_skill import BaseSkill
from core.services.command_executor import CommandExecutorService
from core.mediator.agent_mediator import delegate_task  # –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

class ExecuteWithLLMSkill(BaseSkill):
    def __init__(self):
        self.executor = CommandExecutorService()

    def can_handle(self, message: str) -> bool:
        return any(x in message.lower() for x in [
            "—É—Å—Ç–∞–Ω–æ–≤–∏", "—É–¥–∞–ª–∏", "–æ–±–Ω–æ–≤–∏", "–∑–∞–ø—É—Å—Ç–∏", "—Å–æ–∑–¥–∞–π", "bash", "—Ç–µ—Ä–º–∏–Ω–∞–ª"
        ])

    async def execute(self, user_id: str, message: str) -> str:
        prompt = f"""–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–π –∑–∞–¥–∞—á–∏ –≤ bash-–∫–æ–º–∞–Ω–¥—ã.
–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∑–∞–¥–∞—á—É: "{message}" –≤ —Å–ø–∏—Å–æ–∫ bash-–∫–æ–º–∞–Ω–¥.
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π:
echo -e "—Å—Ç—Ä–æ–∫–∞1\\n—Å—Ç—Ä–æ–∫–∞2" > –ø—É—Ç—å/–∏–º—è.txt
–ù–µ –ø–∏—à–∏ Markdown, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã."""

        response = self.ask_llm(prompt)
        if "error" in response:
            return response["error"]

        raw_lines = response["text"].split("\n")
        commands = self.filter_commands(raw_lines)

        if not commands:
            return "‚ö†Ô∏è LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."

        print("\nüßæ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        for c in commands:
            print(f"  ‚è≥ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {c}")

        print("\n‚è±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 9 —Å–µ–∫—É–Ω–¥...")
        print("   ‚Ü©Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter ‚Äî —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
        print("   ‚êõ  –ù–∞–∂–º–∏—Ç–µ Esc ‚Äî —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")
        print("   ‚è∏Ô∏è –ü—Ä–æ–±–µ–ª ‚Äî –ø–∞—É–∑–∞ / –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n")

        if not self.wait_for_confirmation():
            return "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."

        results = []
        for cmd in commands:
            exec_result = self.executor.execute(cmd)
            output = exec_result["output"]
            status = "‚úÖ" if exec_result["status"] == "success" else "‚ùå"
            results.append(f"{status} {cmd}\n{output}")

            if "command not found" in output:
                missing_command = cmd.split()[0]
                print(f"\n‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {missing_command}")
                install_prompt = f"–£—Å—Ç–∞–Ω–æ–≤–∏ —É—Ç–∏–ª–∏—Ç—É {missing_command} –≤ —Å–∏—Å—Ç–µ–º–µ Ubuntu"
                install_result = await delegate_task("ExecuteWithLLMSkill", install_prompt, user_id)
                results.append(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {missing_command}: {install_result}")

        return f"üìã –ó–∞–¥–∞—á–∞: {message}\n" + "\n".join(results)

    def ask_llm(self, prompt: str) -> dict:
        api_key = os.getenv("DEEPSEEK_API_KEY")
        api_url = os.getenv("DEEPSEEK_URL")
        if not api_key or not api_url:
            return {"error": "‚õîÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è LLM –Ω–µ –∑–∞–¥–∞–Ω—ã."}

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"}
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.2}
        try:
            res = requests.post(api_url, headers=headers, json=payload, timeout=20)
            res.raise_for_status()
            data = res.json()
            return {"text": data["choices"][0]["message"]["content"]}
        except Exception as e:
            return {"error": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {str(e)}"}

    def filter_commands(self, lines) -> list:
        filtered = []
        for line in lines:
            line = line.strip()
            if not line:
                continue
            if line.startswith("```") or line.endswith("```"):
                continue
            if line.lower().startswith("bash"):
                continue
            filtered.append(line)
        return filtered

    def wait_for_confirmation(self) -> bool:
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        old_flags = fcntl.fcntl(fd, fcntl.F_GETFL)
        tty.setcbreak(fd)
        fcntl.fcntl(fd, fcntl.F_SETFL, old_flags | os.O_NONBLOCK)
        countdown = 9
        paused = False
        try:
            while countdown > 0:
                if not paused:
                    print(f"\r‚åõ {countdown} ", end='', flush=True)
                    time.sleep(1)
                    countdown -= 1
                try:
                    key = os.read(fd, 1).decode()
                    if key == "\x1b":
                        print("\nüö´ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                        return False
                    elif key == "\n":
                        print("\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
                        return True
                    elif key == " ":
                        paused = not paused
                        state = "‚è∏Ô∏è –ü–∞—É–∑–∞" if paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ"
                        print(f"\n{state}")
                except BlockingIOError:
                    continue
            print("\n‚è≥ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã.")
            return True
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            fcntl.fcntl(fd, fcntl.F_SETFL, old_flags)
