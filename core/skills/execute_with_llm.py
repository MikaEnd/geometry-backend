from core.interfaces import Skill
from core.services.llm import ask_llm
from core.utils.command_executor import execute_command
from core.utils.user_prompt import confirm_or_cancel
from core.utils.bash_sanitizer import sanitize_command

class ExecuteWithLLMSkill(Skill):
    def can_handle(self, message: str) -> bool:
        return True

    async def execute(self, user_id: str, message: str) -> str:
        system_prompt = (
            "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ Linux. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é bash-–∫–æ–º–∞–Ω–¥—É. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ markdown. –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞."
        )
        response = ask_llm(system_prompt=system_prompt, user_message=message)

        if "error" in response:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç LLM:\n{response['error']}"

        command = response.get("text", "").strip()
        print(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ LLM:\n{command}")

        if not command:
            return "‚ö†Ô∏è LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É."

        sanitized = sanitize_command(command)
        if sanitized is None:
            return "üö´ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."

        approved = confirm_or_cancel(sanitized)
        if not approved:
            return "‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."

        result = execute_command(sanitized)
        if not result.strip():
            return (
                f"üìã –ó–∞–¥–∞—á–∞: {message}\n"
                f"‚úÖ {sanitized}\n"
                f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–µ–ª–∞."
            )

        return f"üìã –ó–∞–¥–∞—á–∞: {message}\n‚úÖ {sanitized}\n\nüì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}"
