# core/skills/execute_with_llm.py

import subprocess
import asyncio
from core.skills.base_skill import BaseSkill
from core.utils.helpers import countdown_with_control
from core.skills.self_heal_skill import SelfHealSkill

class ExecuteWithLLMSkill(BaseSkill):
    async def execute(self, user_id: str, task: str) -> str:
        # –ó–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç LLM
        bash_command = self.generate_command(task)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"üßæ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {bash_command}")
        await countdown_with_control()

        try:
            result = subprocess.run(
                bash_command,
                shell=True,
                check=True,
                text=True,
                capture_output=True,
                timeout=20
            )
            output = result.stdout.strip()
            return f"üìã –ó–∞–¥–∞—á–∞: {task}\n‚úÖ {bash_command}\nüì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output or '‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–µ–ª–∞.'}"
        except subprocess.CalledProcessError as e:
            suggestion = SelfHealSkill.run(task, e.stderr)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:\n{e.stderr}\nü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n{suggestion}"
        except Exception as e:
            return f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def generate_command(self, task: str) -> str:
        # TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
        return f"echo '‚ö†Ô∏è –ü–æ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ó–∞–¥–∞—á–∞: {task}'"
