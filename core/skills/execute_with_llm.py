# core/skills/execute_with_llm.py

import subprocess
import asyncio
from core.skills.base_skill import BaseSkill
from core.utils.helpers import countdown_with_control
from core.skills.self_heal_skill import SelfHealSkill
from core.services.llm import ask_llm

class ExecuteWithLLMSkill(BaseSkill):
    def can_handle(self, message: str) -> bool:
        return True

    async def execute(self, user_id: str, task: str) -> str:
        bash_command = self.generate_command(task)

        print(f"üßæ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {bash_command}")
        await countdown_with_control()

        try:
            result = subprocess.run(
                bash_command,
                shell=True,
                check=True,
                text=True,
                capture_output=True,
                timeout=20
            )
            output = result.stdout.strip()
            return f"üìã –ó–∞–¥–∞—á–∞: {task}\n‚úÖ {bash_command}\nüì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output or '‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–µ–ª–∞.'}"
        except subprocess.CalledProcessError as e:
            suggestion = SelfHealSkill.run(task, e.stderr)
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:\n{e.stderr}\nü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n{suggestion}"
        except Exception as e:
            return f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

    def generate_command(self, task: str) -> str:
        system_prompt = (
            "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ Linux. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–≤ –æ–¥–Ω—É –≤–∞–ª–∏–¥–Ω—É—é bash-–∫–æ–º–∞–Ω–¥—É. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ markdown. –¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞."
        )
        result = ask_llm(system_prompt, task)
        return result.get("text", "").strip()
