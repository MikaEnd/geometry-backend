# core/router/llm_router.py

from core.services.llm import ask_llm
from core.services.auto_handler_generator import create_new_handler
from core.services.ai_trace_logger import log_trace

async def resolve_task(user_id: str, message: str):
    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º: –Ω—É–∂–Ω–∞ –ª–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è
    system_prompt = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏."
    user_prompt = f"–¢—Ä–µ–±—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏?\n–ó–∞–¥–∞—á–∞: {message}\n–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ: –¥–∞ –∏–ª–∏ –Ω–µ—Ç."

    result = ask_llm(system_prompt, user_prompt)
    if result.get("error"):
        return "clarify", None

    answer = result["text"].lower()
    if "–¥–∞" in answer:
        log_trace(user_id, message, "complex", None, None)
        return "complex", None

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é
    user_prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫—Ç–æ –ª—É—á—à–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –∑–∞–¥–∞—á–µ–π: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –º–µ–Ω–µ–¥–∂–µ—Ä, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.\n–ó–∞–¥–∞—á–∞: {message}\n–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
    result = ask_llm(system_prompt, user_prompt)
    if result.get("error"):
        return "clarify", None

    competence = result["text"].lower().strip()

    if "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" in competence:
        log_trace(user_id, message, "clarify", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", None)
        return "clarify", None

    # üì¶ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from core.handlers.routing import get_handler_by_competence

    handler = get_handler_by_competence(competence)
    if not handler:
        create_new_handler(competence)
        handler = get_handler_by_competence(competence)

    handler_name = handler.__class__.__name__ if handler else "None"
    log_trace(user_id, message, "normal", competence, handler_name)
    return "normal", handler
