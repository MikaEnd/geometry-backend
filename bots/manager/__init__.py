from core.interfaces import BotHandler
from bots.lawyer import LawyerHandler
from bots.developer import DeveloperHandler
from bots.web_researcher import WebResearcherHandler
from bots.llm_assistant import LLMHandler

class ManagerHandler(BotHandler):
    def __init__(self):
        self.known_handlers = {
            "lawyer": LawyerHandler(),
            "developer": DeveloperHandler(),
            "web_researcher": WebResearcherHandler(),
        }
        self.fallback_handler = LLMHandler()

    def can_handle(self, task_description: str) -> bool:
        return True  # fallback

    def handle(self, task_description: str) -> dict:
        competence = self.guess_competence(task_description)

        if competence in self.known_handlers:
            return {
                "result": f"üß≠ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É: {task_description}",
                "next": f"üîé –í–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: {competence}. –£—Ç–æ—á–Ω–∏—Ç–µ —Ü–µ–ª—å –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å."
            }

        # 1. –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—É–±-–±–æ—Ç–∞
        spec_prompt = f"""–¢—ã ‚Äî AI-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É: "{task_description}".
–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏ –æ–ø–∏—à–∏, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π —Å—É–±-–±–æ—Ç, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.
–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ñ—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ –æ–¥–Ω–æ–º –∞–±–∑–∞—Ü–µ –±–µ–∑ Markdown.
"""

        llm_response = self.fallback_handler.ask_llm(spec_prompt)
        if "error" in llm_response:
            return {"error": llm_response["error"]}

        # 2. –ü–µ—Ä–µ–¥–∞—ë–º —ç—Ç–æ –¢–ó —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
        dev = self.known_handlers["developer"]
        return {
            "result": f"üß≠ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞—à—ë–ª –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è: {task_description}",
            "next": f"ü§ñ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¢–ó –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—É–±-–±–æ—Ç–∞.",
            "tech_task": llm_response["text"],
            "developer_response": dev.handle(llm_response["text"])
        }

    def guess_competence(self, task: str) -> str | None:
        task = task.lower()
        if any(word in task for word in ["–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "–∑–∞–∫–æ–Ω", "—é—Ä–∏—Å—Ç"]):
            return "lawyer"
        if any(word in task for word in ["docker", "—É—Å—Ç–∞–Ω–æ–≤–∏", "–∫–æ–¥", "—Å–æ–∑–¥–∞–π", "nginx", "init", "postgre"]):
            return "developer"
        if any(word in task for word in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–≥–¥–µ", "–≤–µ–±", "google", "—è–Ω–¥–µ–∫—Å", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"]):
            return "web_researcher"
        return None
