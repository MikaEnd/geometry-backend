from core.interfaces import BotHandler
from bots.lawyer import LawyerHandler
from bots.developer import DeveloperHandler
from bots.web_researcher import WebResearcherHandler
from bots.llm_assistant import LLMHandler
from core.skills.execute_with_llm import ExecuteWithLLMSkill
from core.services.ai_trace_logger import log_trace

class ManagerHandler(BotHandler):
    def __init__(self):
        self.known_handlers = {
            "lawyer": LawyerHandler(),
            "developer": DeveloperHandler(),
            "web_researcher": WebResearcherHandler(),
        }
        self.fallback_handler = LLMHandler()
        self.skill = ExecuteWithLLMSkill()

    def can_handle(self, task_description: str) -> bool:
        return True  # fallback

    async def handle(self, task_description: str, user_id: str) -> str:
        competence = self.guess_competence(task_description)
        handler = self.known_handlers.get(competence)

        log_trace(
            user_id=user_id,
            message=task_description,
            mode="delegate",
            competence=competence,
            handler=handler.__class__.__name__ if handler else None
        )

        if handler:
            return await handler.handle(task_description, user_id)

        # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¢–ó
        prompt = f"""–¢—ã ‚Äî AI-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É: "{task_description}". 
–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏ –æ–ø–∏—à–∏, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π —Å—É–±-–±–æ—Ç, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.
–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç—Ç–æ –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ñ—É–ª—Å—Ç–µ–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –û–¥–∏–Ω –∞–±–∑–∞—Ü, –±–µ–∑ Markdown."""
        llm_response = self.fallback_handler.ask_llm(prompt)
        if "error" in llm_response:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç LLM: {llm_response['error']}"

        dev_handler = self.known_handlers["developer"]
        dev_response = await dev_handler.handle(llm_response["text"], user_id)

        return f"""üß≠ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¢–ó –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {llm_response["text"]}
üõ† –û—Ç–≤–µ—Ç –æ—Ç DeveloperHandler: {dev_response}"""

    def guess_competence(self, task: str) -> str | None:
        task = task.lower()
        if any(word in task for word in ["–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "–∑–∞–∫–æ–Ω", "—é—Ä–∏—Å—Ç"]):
            return "lawyer"
        if any(word in task for word in ["docker", "—É—Å—Ç–∞–Ω–æ–≤–∏", "–∫–æ–¥", "—Å–æ–∑–¥–∞–π", "nginx", "init", "postgre"]):
            return "developer"
        if any(word in task for word in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–≥–¥–µ", "–≤–µ–±", "google", "—è–Ω–¥–µ–∫—Å", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"]):
            return "web_researcher"
        return None
